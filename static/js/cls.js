// Generated by CoffeeScript 1.8.0
(function() {
  var shuffle;

  angular.module('ClsApp', [], function($interpolateProvider) {
    $interpolateProvider.startSymbol('{[');
    $interpolateProvider.endSymbol(']}');
    return "ClsApp";
  });

  angular.module('ClsApp').controller('GameCtrl', [
    '$http', function($http) {
      var Game;
      Game = this;
      Game.level = 1;
      Game.length = 6;
      Game.width = 6;
      Game.clicksLength = 3;
      Game.grid = [];
      Game.initialize = function() {
        var i, j, row, _i, _j, _ref, _ref1;
        Game.grid = [];
        for (j = _i = 0, _ref = Game.length; 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
          row = [];
          for (i = _j = 0, _ref1 = Game.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            row.push({
              'activated': false,
              'x': i,
              'y': j
            });
          }
          Game.grid.push(row);
        }
        return Game.setClicks();
      };
      Game.setClicks = function() {
        var clicks, i, tile, tilesFlat, x, y, _i, _j, _k, _ref, _ref1, _ref2, _results;
        tilesFlat = [];
        for (x = _i = 0, _ref = Game.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
          for (y = _j = 0, _ref1 = Game.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            tilesFlat.push([x, y]);
          }
        }
        shuffle(tilesFlat);
        clicks = [];
        _results = [];
        for (i = _k = 0, _ref2 = Game.clicksLength; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          tile = tilesFlat[i];
          _results.push(Game.activate(tile[0], tile[1]));
        }
        return _results;
      };
      Game.activate = function(x, y) {
        var tile;
        tile = Game.grid[y][x];
        tile.activated = !tile.activated;
        if (y > 0) {
          tile = Game.grid[y - 1][x];
          tile.activated = !tile.activated;
        }
        if (y < Game.length - 1) {
          tile = Game.grid[y + 1][x];
          tile.activated = !tile.activated;
        }
        if (x > 0) {
          tile = Game.grid[y][x - 1];
          tile.activated = !tile.activated;
        }
        if (x < Game.width - 1) {
          tile = Game.grid[y][x + 1];
          tile.activated = !tile.activated;
        }
        if (Game.over()) {
          return Game.levelUp() & Game.initialize();
        }
      };
      Game.over = function() {
        var column, row, _i, _j, _len, _len1, _ref;
        _ref = Game.grid;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
            column = row[_j];
            if (column.activated) {
              return false;
            }
          }
        }
        return true;
      };
      Game.levelUp = function() {
        var powerUps;
        powerUps = [];
        if (Game.width < Game.clicksLength && Game.width < 12) {
          powerUps.push(0);
        }
        if (Game.length < Game.clicksLength) {
          powerUps.push(1);
        }
        if (Game.clicksLength < Game.width * Game.length / 2) {
          powerUps.push(2);
        }
        shuffle(powerUps);
        switch (powerUps[0]) {
          case 0:
            Game.width++;
            break;
          case 1:
            Game.length++;
            break;
          case 2:
            Game.clicksLength++;
        }
        return Game.level++;
      };
      Game.range = function(x) {
        if (x < 0) {
          return new Array(0);
        } else {
          return new Array(x);
        }
      };
      Game.classOf = function(tile) {
        var x, y, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
        _ref = [tile.x, tile.y], x = _ref[0], y = _ref[1];
        return {
          'secondary': !tile.activated,
          'round-tl': !((_ref1 = Game.grid[y - 1]) != null ? (_ref2 = _ref1[x - 1]) != null ? _ref2.activated : void 0 : void 0) && tile.activated && !((_ref3 = Game.grid[y - 1]) != null ? (_ref4 = _ref3[x]) != null ? _ref4.activated : void 0 : void 0) && !((_ref5 = Game.grid[y]) != null ? (_ref6 = _ref5[x - 1]) != null ? _ref6.activated : void 0 : void 0),
          'round-tr': !((_ref7 = Game.grid[y - 1]) != null ? (_ref8 = _ref7[x + 1]) != null ? _ref8.activated : void 0 : void 0) && tile.activated && !((_ref9 = Game.grid[y - 1]) != null ? (_ref10 = _ref9[x]) != null ? _ref10.activated : void 0 : void 0) && !((_ref11 = Game.grid[y]) != null ? (_ref12 = _ref11[x + 1]) != null ? _ref12.activated : void 0 : void 0),
          'round-bl': !((_ref13 = Game.grid[y + 1]) != null ? (_ref14 = _ref13[x - 1]) != null ? _ref14.activated : void 0 : void 0) && tile.activated && !((_ref15 = Game.grid[y + 1]) != null ? (_ref16 = _ref15[x]) != null ? _ref16.activated : void 0 : void 0) && !((_ref17 = Game.grid[y]) != null ? (_ref18 = _ref17[x - 1]) != null ? _ref18.activated : void 0 : void 0),
          'round-br': !((_ref19 = Game.grid[y + 1]) != null ? (_ref20 = _ref19[x + 1]) != null ? _ref20.activated : void 0 : void 0) && tile.activated && !((_ref21 = Game.grid[y + 1]) != null ? (_ref22 = _ref21[x]) != null ? _ref22.activated : void 0 : void 0) && !((_ref23 = Game.grid[y]) != null ? (_ref24 = _ref23[x + 1]) != null ? _ref24.activated : void 0 : void 0)
        };
      };
      return "GameCtrl";
    }
  ]);

  shuffle = function(array) {
    var currentIndex, randomIndex, temporaryValue;
    currentIndex = array.length;
    while (0 !== currentIndex) {
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
    return array;
  };

}).call(this);
